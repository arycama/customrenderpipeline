#pragma kernel InitHeightmap

#include "../../Common.hlsl"

Texture2D<float> HeightmapInput;
RWTexture2D<float> HeightmapResult;
float HeightmapMin, HeightmapMax;

[numthreads(8,8,1)]
void InitHeightmap(uint2 id : SV_DispatchThreadID)
{
	// Remap from Min:Max range to 0:1
	HeightmapResult[id] = Remap(HeightmapInput[id], HeightmapMin, HeightmapMax, 0, 1.0);
}

Texture2D<float> DepthCopyInput;
RWTexture2D<float2> DepthCopyResult;


[numthreads(8, 8, 1)]
void DepthCopy(uint2 id : SV_DispatchThreadID)
{
	float depth = DepthCopyInput[id];
	DepthCopyResult[id] = depth;
}

#pragma kernel GenerateMinMaxHeights

Texture2D<float2> GenerateMinMaxHeightsInput;
RWTexture2D<float2> GenenrateMinMaxHeightsResult;
uint _Width, _Height;

float GetMinDepth(uint2 coord)
{
	uint2 size = uint2(_Width, _Height);
	uint2 clampedCoord = min(coord, size - 1);
	return GenerateMinMaxHeightsInput[clampedCoord].r;
}

float GetMaxDepth(uint2 coord)
{
	uint2 size = uint2(_Width, _Height);
	uint2 clampedCoord = min(coord, size - 1);
	return GenerateMinMaxHeightsInput[clampedCoord].g;
}

[numthreads(8,8,1)]
void GenerateMinMaxHeights(uint2 id : SV_DispatchThreadID)
{
	uint2 size = uint2(_Width, _Height);
	uint2 coord = 2 * id;
	
	float4 minDepths;
	minDepths.x = GetMinDepth(coord + uint2(0, 0));
	minDepths.y = GetMinDepth(coord + uint2(1, 0));
	minDepths.z = GetMinDepth(coord + uint2(0, 1));
	minDepths.w = GetMinDepth(coord + uint2(1, 1));
	float minDepth = Min4(minDepths);
	
	float4 maxDepths;
	maxDepths.x = GetMaxDepth(coord + uint2(0, 0));
	maxDepths.y = GetMaxDepth(coord + uint2(1, 0));
	maxDepths.z = GetMaxDepth(coord + uint2(0, 1));
	maxDepths.w = GetMaxDepth(coord + uint2(1, 1));
	float maxDepth = Max4(maxDepths);
	
	// Incorporate additional texels if the previous level's width or height (or both) are odd.
	bool shouldIncludeExtraColumnFromPreviousLevel = (size.x & 1) != 0;
	bool shouldIncludeExtraRowFromPreviousLevel = (size.y & 1) != 0;
	
	if (shouldIncludeExtraColumnFromPreviousLevel)
	{
		float4 extraColumnTexelValues;
		extraColumnTexelValues.x = GetMinDepth(coord + uint2(2, 0));
		extraColumnTexelValues.y = GetMinDepth(coord + uint2(2, 1));
		extraColumnTexelValues.z = GetMaxDepth(coord + uint2(2, 1));
		extraColumnTexelValues.w = GetMaxDepth(coord + uint2(2, 1));

		// In the case where the width and height are both odd, need to include the
        // 'corner' value as well.
		if (shouldIncludeExtraRowFromPreviousLevel)
		{
			float cornerTexelValueMin = GetMinDepth(coord + uint2(2, 2));
			float cornerTexelValueMax = GetMaxDepth(coord + uint2(2, 2));
			minDepth = min(minDepth, cornerTexelValueMin);
			maxDepth = max(maxDepth, cornerTexelValueMax);
		}
		
		minDepth = Min3(float3(minDepth, extraColumnTexelValues.xy));
		maxDepth = Max3(float3(maxDepth, extraColumnTexelValues.zw));
	}
	
	if (shouldIncludeExtraRowFromPreviousLevel)
	{
		float2 extraRowTexelValuesMin;
		extraRowTexelValuesMin.x = GetMinDepth(coord + uint2(0, 2));
		extraRowTexelValuesMin.y = GetMinDepth(coord + uint2(1, 2));
		minDepth = Min3(float3(minDepth, extraRowTexelValuesMin.xy));
		
		float2 extraRowTexelValuesMax;
		extraRowTexelValuesMax.x = GetMaxDepth(coord + uint2(0, 2));
		extraRowTexelValuesMax.y = GetMaxDepth(coord + uint2(1, 2));
		maxDepth = Max3(float3(maxDepth, extraRowTexelValuesMax.xy));
	}

	DepthCopyResult[id] = float2(minDepth, maxDepth);
}

#pragma kernel InitNormalMap

Texture2D<float> InitNormalMapInput;
RWTexture2D<float2> InitNormalMapOutput;
uint MaxWidth, MaxHeight;
float2 Scale;

[numthreads(8, 8, 1)]
void InitNormalMap(uint2 id : SV_DIspatchThreadID)
{
	float h[3][3];
	float3x3 values;
	
	[unroll]
	for (int y = -1; y <= 1; y++)
	{
		[unroll]
		for (int x = -1; x <= 1; x++)
		{
			h[x + 1][y + 1] = InitNormalMapInput[clamp(id + int2(x, y), 0, uint2(MaxWidth, MaxHeight))];
		}
	}
	
	float2 d;
	d.x = h[0][0] + 2.0 * h[0][1] + h[0][2] - h[2][0] - 2.0 * h[2][1] - h[2][2];
	d.y = h[0][0] + 2.0 * h[1][0] + h[2][0] - h[0][2] - 2.0 * h[1][2] - h[2][2];
	
	InitNormalMapOutput[id] = d * Scale;
}