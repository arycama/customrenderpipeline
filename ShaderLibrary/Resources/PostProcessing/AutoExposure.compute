#include "../../Color.hlsl"
#include "../../Common.hlsl"
#include "../../Exposure.hlsl"
#include "../../Samplers.hlsl"

#pragma kernel LuminanceBuildHistogram
#pragma kernel LuminanceHistogramAverage

#define NUM_HISTOGRAM_BINS 256

Texture2D<float3> Input;
Texture2D<float> ExposureTexture;
RWStructuredBuffer<uint> LuminanceHistogram;
RWStructuredBuffer<float> LuminanceOutput;

cbuffer Properties
{
	float MinEv, MaxEv;
	float AdaptationSpeed;
	float ExposureCompensation;
	float Aperture, Iso, ShutterSpeed;
	float DeltaTime;
	float IsFirst, Mode;
};

groupshared uint HistogramShared[NUM_HISTOGRAM_BINS];

[numthreads(16, 16, 1)]
void LuminanceBuildHistogram(uint groupIndex : SV_GroupIndex, uint2 threadId : SV_DispatchThreadID)
{
    HistogramShared[groupIndex] = 0;
    
    GroupMemoryBarrierWithGroupSync();
    
	if (all(threadId < _ScaledResolution.xy))
	{
		float3 color = Input[threadId];
		float luminance = Luminance(color) / (_Exposure/* + ExposureCompensation*/);
		
		float minLuminance = EV100ToLuminance(MinEv);
		float maxLuminance = EV100ToLuminance(MaxEv);
		
		uint binIndex = luminance ? Remap(LuminanceToEV100(luminance), MinEv, MaxEv, 1.0, 255.0) : 0;
		InterlockedAdd(HistogramShared[binIndex], 1);
	}
    
    GroupMemoryBarrierWithGroupSync();
    
	InterlockedAdd(LuminanceHistogram[groupIndex], HistogramShared[groupIndex]);
}

[numthreads(256, 1, 1)]
void LuminanceHistogramAverage(uint groupIndex : SV_GroupIndex)
{
	uint countForThisBin = LuminanceHistogram[groupIndex];
	HistogramShared[groupIndex] = countForThisBin * groupIndex;
    
	GroupMemoryBarrierWithGroupSync();
    
	// Reset the count stored in the buffer in anticipation of the next pass
	LuminanceHistogram[groupIndex] = 0;
	
    [unroll]
	for (uint histogramSampleIndex = (NUM_HISTOGRAM_BINS >> 1); histogramSampleIndex > 0; histogramSampleIndex >>= 1)
	{
		if (groupIndex < histogramSampleIndex)
		{
			HistogramShared[groupIndex] += HistogramShared[groupIndex + histogramSampleIndex];
		}

		GroupMemoryBarrierWithGroupSync();
	}
    
	if (groupIndex)
		return;
	
	float pixelCount = _ScaledResolution.x * _ScaledResolution.y;
	
	// Here we take our weighted sum and divide it by the number of pixels
    // that had luminance greater than zero (since the index == 0, we can
    // use countForThisBin to find the number of black pixels)
	float weightedLogAverage = (HistogramShared[0] / max(pixelCount - float(countForThisBin), 1.0)) - 1.0;
	
	float averageEv = Remap(weightedLogAverage, 1.0, 255.0, MinEv, MaxEv);

	float2 uv = saturate(Remap(averageEv, MinEv, MaxEv));
	float exposureCompensation = ExposureTexture.SampleLevel(_LinearClampSampler, float2(uv.x, 0.5), 0.0);
	
	float averageLuminance = EV100ToLuminance(averageEv);
	exposureCompensation = LuminanceToEV100(1.03 - 2.0 * rcp(log10(averageLuminance + 1.0) + 2.0));
	exposureCompensation = ExposureCompensation;
	
	averageEv -= exposureCompensation;
		
	float previousExposure = _Exposure;
	float evLastFrame = ExposureToEV100(previousExposure);// + ExposureCompensation;
	float adaptedEv = lerp(averageEv, evLastFrame, exp(-DeltaTime * AdaptationSpeed));
	adaptedEv = averageEv;
	
	if(Mode == 1.0)
		adaptedEv = ComputeEV100(Aperture, ShutterSpeed, Iso) + ExposureCompensation;
	
	
	float currentExposure = EV100ToExposure(adaptedEv);
	if (IsFirst || IsInfOrNaN(currentExposure) || currentExposure == 0.0)
		currentExposure = 1.0;
	
	if (previousExposure == 0.0 || IsInfOrNaN(previousExposure))
		previousExposure = 1.0;
	
	LuminanceOutput[0] = currentExposure; // Apply exposure
	LuminanceOutput[1] = rcp(currentExposure); // Remove exposure
	LuminanceOutput[2] = currentExposure * rcp(previousExposure); // Previous to current
	LuminanceOutput[3] = previousExposure * rcp(currentExposure); // Current to previous
}