#include "../Complex.hlsl"
#include "../Math.hlsl"
#include "../Random.hlsl"
#include "../Material.hlsl"

#pragma kernel Dispersion
#pragma kernel FftColumns
#pragma kernel CalculateNormals
#pragma kernel GenerateFilteredMips
#pragma kernel Spectrum

cbuffer InitSpectrumProperties
{
	float4 _OceanScale, SpectrumStart, SpectrumEnd;
	float _OceanGravity, Time, TimeScale, SequenceLength;
};

RWBuffer<float> OceanDispersionWrite;
RWBuffer<float4> OceanSpectrumWrite;
Buffer<float> OceanDispersion;
Buffer<float4> OceanSpectrum;

RWTexture2DArray<float2> HeightResult;
RWTexture2DArray<float4> DisplacementResult, SlopeResult;

static const uint _Resolution = 128;
static const uint Log2Resolution = log2(_Resolution);
static const uint HalfResolution = _Resolution >> 1;

cbuffer OceanData
{
	float scale0;
	float windSpeed0;
	float windAngle0;
	float fetch0;
	float spreadBlend0;
	float swell0;
	float peakEnhancement0;
	float shortWavesFade0;
	float scale1;
	float windSpeed1;
	float windAngle1;
	float fetch1;
	float spreadBlend1;
	float swell1;
	float peakEnhancement1;
	float shortWavesFade1;
};

float DispersionShallow(float kLength, float depth)
{
	float a = kLength * depth;
	float b = tanh(a);
	return sqrt(_OceanGravity * kLength * b);
}

float DispersionShallowDerivative(float kLength, float depth)
{
	float a = kLength * depth;
	float b = tanh(a);
	float dispersionRelation = sqrt(_OceanGravity * kLength * b);
	return 0.5 * _OceanGravity * (b + a * (1.0 - b * b)) / dispersionRelation;
}

float DispersionDeep(float kLength)
{
	return sqrt(_OceanGravity * kLength);
}

float DispersionDeepDerivative(float kLength)
{
	return 0.5 * _OceanGravity / DispersionDeep(kLength);
}

float PhillipsSpectrum(float2 k, float kLength, float rcpPatchSize)
{
	// Amplitude normalization
	float fftNorm = pow(_Resolution, -0.25);
	float philNorm = exp(1.0) * rcpPatchSize;
	float a = Sq(fftNorm * philNorm);

	float maxWaveHeight = Sq(windSpeed0) / _OceanGravity; // Largest possible waves arising from a continuous wind speed of V
	
	// Eq 40
	float2 windDirection = float2(cos(windAngle0 * TwoPi), sin(windAngle0 * TwoPi));
	float phillips = a * exp(-rcp(Sq(kLength * maxWaveHeight))) / pow(kLength, 4.0) * pow(dot(k, windDirection), 6.0);
	
	// Remove small wavelengths (eq 41)
	phillips *= exp(-Sq(kLength * shortWavesFade0));
	
	phillips = sqrt(phillips);
	
	// Move waves along wind direction
	if (dot(k, windDirection) < 0.0)
		phillips *= -sqrt(1.0 - swell0);

	return phillips;
}

// Source: https://wikiwaves.org/Ocean-Wave_Spectra#JONSWAP_Spectrum
float JonswapAlpha(float windSpeed, float fetch)
{
	return 0.076 * pow(abs(Sq(windSpeed) / (fetch * _OceanGravity)), 0.22);
}

// Source: https://wikiwaves.org/Ocean-Wave_Spectra#JONSWAP_Spectrum
float JonswapPeakAngularFrequency(float windSpeed, float fetch)
{
	return 22.0 * pow(abs(Sq(_OceanGravity) / (windSpeed * fetch)), 1.0 / 3.0);
}

// Normalization factor approximation for Longuet-Higgins function
float LonguetHigginsNormalization(float s)
{
	// Note: i forgot how i derived this :skull:
	float a = sqrt(s);
	return (s < 0.4) ? (0.5 / Pi) + s * (0.220636 + s * (-0.109 + s * 0.090)) : rsqrt(Pi) * (a * 0.5 + (1.0 / a) * 0.0625);
}

// Source: Christopher J. Horvath - Empirical Directional Wave Spectra for Computer Graphics
float LonguetHigginsFunction(float s, float theta)
{
	return LonguetHigginsNormalization(s) * pow(abs(cos(theta * 0.5)), 2.0 * s);
}

// Source: Christopher J. Horvath - Empirical Directional Wave Spectra for Computer Graphics
float HasselmannDirectionalSpread(float w, float w_p, float wind_speed, float theta)
{
	float p = w / w_p;
	float s = (w <= w_p) ? 6.97 * pow(abs(p), 4.06) : 9.77 * pow(abs(p), -2.33 - 1.45 * (wind_speed * w_p / _OceanGravity - 1.17)); // Shaping parameter
	float s_xi = 16.0 * tanh(w_p / w) * swell0 * swell0; // Shaping parameter w/ swell
	return LonguetHigginsFunction(s + s_xi, theta - windAngle0 * TwoPi);
}

// Source: Christopher J. Horvath - Empirical Directional Wave Spectra for Computer Graphics
float TmaSpectrum(float w, float w_p, float alpha, float depth)
{
	const float beta = 1.25;
	const float gamma = 3.3; // Spectral peak shape constant
	
	float sigma = (w <= w_p) ? 0.07 : 0.09;
	float r = exp(-(w - w_p) * (w - w_p) / (2.0 * sigma * sigma * w_p * w_p));
	float jonswap_spectrum = (alpha * Sq(_OceanGravity)) / pow(w, 5) * exp(-beta * pow(w_p / w, 4)) * pow(gamma, r);

	float w_h = min(w * sqrt(depth / _OceanGravity), 2.0);
	float kitaigorodskii_depth_attenuation = (w_h <= 1.0) ? 0.5 * w_h * w_h : 1.0 - 0.5 * (2.0 - w_h) * (2.0 - w_h);

	return jonswap_spectrum * kitaigorodskii_depth_attenuation;
}

float2 GetSpectrumAmplitude(float2 k_vec, float rcpTileLength, float depth = 100)
{
	float2 dk = 2.0 * Pi * rcpTileLength;
	float k = length(k_vec);
	float theta = atan2(k_vec.y, k_vec.x);
	
	float alpha = JonswapAlpha(windSpeed0, fetch0);
	float omega = JonswapPeakAngularFrequency(windSpeed0, fetch0);

	float w = DispersionDeep(k);
	float wNorm = DispersionDeepDerivative(k) / k * dk.x * dk.y;
	float s = TmaSpectrum(w, omega, alpha, depth);
	float d = lerp(0.5 / Pi, HasselmannDirectionalSpread(w, omega, windSpeed0, theta), spreadBlend0) * exp(-Sq(shortWavesFade0 * k));
	
	return sqrt(2.0) * sqrt(max(0, s * d * wNorm));
}

[numthreads(32, 32, 1)]
void Spectrum(uint3 id : SV_DispatchThreadID)
{

	int n = (int) id.x - HalfResolution;
	int m = (int) id.y - HalfResolution;
	
	float4 hkt = 0.0;
	float wk = 0.0;
	
	uint index = (id.z * _Resolution + id.y) * _Resolution + id.x;
	
	float nr = length(float2(n, m));
	if ((n || m) && nr >= SpectrumStart[id.z] && nr < SpectrumEnd[id.z])
	{
		float rcpPatchSize = _OceanScale[id.z];
		float2 k = TwoPi * float2(n, m) * rcpPatchSize;
		float rcpKLength = RcpLength(k);
		float kLength = rcp(rcpKLength);
	
		// Eq 31
		float w = DispersionDeep(kLength);
	
		// Eq 34
		float T = SequenceLength;
		float w0 = TwoPi / T;
		
		// Eq 35
		wk = floor(w / w0) * w0;
		
		// Gaussian random numbers
		float4 xi = GaussianFloat4(index);
		
		hkt.xy = rcp(sqrt(2.0)) * xi.xy * PhillipsSpectrum(k * rcpKLength, kLength, rcpPatchSize);
		hkt.zw = rcp(sqrt(2.0)) * xi.zw * conj(PhillipsSpectrum(-k * rcpKLength, kLength, rcpPatchSize));
		
		hkt.xy = xi.xy * GetSpectrumAmplitude(k, rcpPatchSize);
		hkt.zw = xi.zw * conj(GetSpectrumAmplitude(-k, rcpPatchSize));
	}
	
	OceanDispersionWrite[index] = wk;
	OceanSpectrumWrite[index] = hkt;
}

groupshared float2 _HShared[2][_Resolution];
groupshared float2 _DxShared[2][_Resolution];
groupshared float2 _DzShared[2][_Resolution];
groupshared float2 _SxShared[2][_Resolution];
groupshared float2 _SzShared[2][_Resolution];

void Fft(uint id, inout float2 height, inout float2 dispX, inout float2 dispZ, inout float2 slopeX, inout float2 slopeZ)
{
    // Load entire row or column into scratch array
	_HShared[0][id] = height;
	_DxShared[0][id] = dispX;
	_DzShared[0][id] = dispZ;
	_SxShared[0][id] = slopeX;
	_SzShared[0][id] = slopeZ;

	for (uint i = 0; i < Log2Resolution; i++)
	{
		GroupMemoryBarrierWithGroupSync();

		uint sectionWidth = 2 << i;
		uint halfSectionWidth = sectionWidth / 2;

		uint sectionStartOffset = id & ~(sectionWidth - 1);
		uint halfSectionOffset = id & (halfSectionWidth - 1);
		uint sectionOffset = id & (sectionWidth - 1);
		
		float2 weights = cexp(cimg(2.0 * Pi * sectionOffset / sectionWidth));

		uint2 indices = sectionStartOffset + halfSectionOffset;
		indices.y += halfSectionWidth;

		if (i == 0)
			indices = reversebits(indices) >> (32 - Log2Resolution) & (_Resolution - 1);
			
		uint2 textureIndices = (i & 1) ? uint2(1, 0) : uint2(0, 1);
		
		height = _HShared[textureIndices.y][id] = cadd(_HShared[textureIndices.x][indices.x], cmul(_HShared[textureIndices.x][indices.y], weights));
		
		dispX = _DxShared[textureIndices.y][id] = cadd(_DxShared[textureIndices.x][indices.x], cmul(_DxShared[textureIndices.x][indices.y], weights));
		dispZ = _DzShared[textureIndices.y][id] = cadd(_DzShared[textureIndices.x][indices.x], cmul(_DzShared[textureIndices.x][indices.y], weights));
		
		slopeX = _SxShared[textureIndices.y][id] = cadd(_SxShared[textureIndices.x][indices.x], cmul(_SxShared[textureIndices.x][indices.y], weights));
		slopeZ = _SzShared[textureIndices.y][id] = cadd(_SzShared[textureIndices.x][indices.x], cmul(_SzShared[textureIndices.x][indices.y], weights));
	}
}

[numthreads(_Resolution, 1, 1)]
void Dispersion(uint3 id : SV_DispatchThreadID)
{
	int n = (int) id.x - HalfResolution;
	int m = (int) id.y - HalfResolution;
	
	uint index = (id.z * _Resolution + id.y) * _Resolution + id.x;
	
	// Eq 43
	float4 h0 = OceanSpectrum[index];
	float wtk = OceanDispersion[index] * Time * TimeScale;
	float2 h = cmul(h0.xy, cexp(cimg(wtk)));
	h = cadd(h, cmul(h0.zw, cexp(-cimg(wtk))));
	
	// Eq 37
	float2 k = TwoPi * float2(n, m) * _OceanScale[id.z];
	float kLengthRcp = rsqrt(dot(k, k));
		
	float2 slopeX = cmul(cimg(k.x), h);
	float2 slopeZ = cmul(cimg(k.y), h);

	// Eq 44
	float rcpKLength = (n || m) ? kLengthRcp : 0.0;
	float2 dispX = cmul(-cimg(k.x * rcpKLength), h);
	float2 dispZ = cmul(-cimg(k.y * rcpKLength), h);
	
	// Perform the FFT
	Fft(id.x, h, dispX, dispZ, slopeX, slopeZ);
	
	// Output results to textures
	HeightResult[id] = h;
	DisplacementResult[id] = float4(dispX, dispZ);
	SlopeResult[id] = float4(slopeX, slopeZ);
}

RWTexture2DArray<float3> DisplacementOutput;
RWTexture2DArray<float4> OceanNormalFoamSmoothness;
Texture2DArray<float2> Height;
Texture2DArray<float4> Displacement, Slope;

[numthreads(_Resolution, 1, 1)]
void FftColumns(uint3 id : SV_DispatchThreadID)
{
    // Load entire row or column into scratch array
	float2 height = Height[id.yxz];
	float4 displacement = Displacement[id.yxz];
	float4 slope = Slope[id.yxz];
	
	Fft(id.x, height, displacement.xy, displacement.zw, slope.xy, slope.zw);
	
	float sign = ((id.x + id.y) & 1) ? -1.0 : 1.0;
	DisplacementOutput[id.yxz] = float3(-displacement.x, height.x, -displacement.z) * sign;
	
	float3 normal = normalize(float3(-slope.xz * sign, 1.0));
	
	OceanNormalFoamSmoothness[id.yxz] = float4(normal.xy, 0.0, 0.0); // Snorm texture, need to put smoothness into -1 to 1 range
}

cbuffer CalculateNormalsProperties
{
	float4 _CascadeTexelSizes;
	float Smoothness;
	float _FoamStrength, _FoamDecay, _FoamThreshold;
	uint _OceanTextureSlicePreviousOffset;
};

Texture2DArray<float3> DisplacementInput;

[numthreads(8, 8, 1)]
void CalculateNormals(uint3 id : SV_DispatchThreadID)
{
    // Original change x/y
	float delta = _CascadeTexelSizes[id.z];

	float3 left = DisplacementInput[int3((id.xy + int2(-1, 0)) % _Resolution, id.z)];
	float3 right = DisplacementInput[int3((id.xy + int2(1, 0)) % _Resolution, id.z)];
	float3 down = DisplacementInput[int3((id.xy + int2(0, -1)) % _Resolution, id.z)];
	float3 up = DisplacementInput[int3((id.xy + int2(0, 1)) % _Resolution, id.z)];

	float3 dx = (right - left) / (2.0 * delta);
	float3 dy = (up - down) / (2.0 * delta);
	
	float2 normalGradients = float2(-dx.y, -dy.y);
	
	float3 normal = normalize(float3(normalGradients, 1.0));
	normal.xy = OceanNormalFoamSmoothness[uint3(id.xy, id.z)].xy;
	float normalLength = SmoothnessToNormalLength(Smoothness);
	normal *= normalLength;
	
	// Eq 45
	float jxx = 1.0 + dx.x;
	float jyy = 1.0 + dy.z;
	float jxy = dx.x;
	float jyx = dy.z;
	
	float jacobian = jxx * jyy - jxy * jyx;
	OceanNormalFoamSmoothness[uint3(id.xy, id.z)] = float4(normal.xy, jacobian, Remap(normalLength, 2.0 / 3.0, 1.0, -1.0)); // Snorm texture, need to put smoothness into -1 to 1 range
}

RWTexture2DArray<float4> SmoothnessOutput0, SmoothnessOutput1, SmoothnessOutput2, SmoothnessOutput3, SmoothnessOutput4, SmoothnessOutput5, SmoothnessOutput6, SmoothnessOutput7;
uint Size;

// Thread group size of 32 is required to process  the entire 128x128 texture in shared memory
groupshared float4 mipDataShared[32][32];

static const uint ThreadCount = 32;

float4 UnpackData(float4 data)
{
	return float4(UnpackNormalSNorm(data.rg) * Remap(data.a, -1.0, 1.0, 2.0 / 3.0), data.b);
}

[numthreads(32, 32, 1)]
void GenerateFilteredMips(uint2 groupThreadID : SV_GroupThreadID, uint2 groupID : SV_GroupID, uint2 dispatchThreadID : SV_DispatchThreadID)
{
	uint depth = groupID.x;
	groupID = 0;
	dispatchThreadID.x %= Size;

	RWTexture2DArray<float4> result[8] = { SmoothnessOutput0, SmoothnessOutput1, SmoothnessOutput2, SmoothnessOutput3, SmoothnessOutput4, SmoothnessOutput5, SmoothnessOutput6, SmoothnessOutput7 };
	float4 mipDataSum = 0.0;

    [unroll]
	for (uint y = 0; y < 2; y++)
	{
        [unroll]
		for (uint x = 0; x < 2; x++)
		{
			uint2 offset = dispatchThreadID * 4 + 2 * uint2(x, y);

			// TODO: Gather?
			float4 mipData = UnpackData(SmoothnessOutput0[uint3(offset + uint2(0, 0), depth)]);
			mipData += UnpackData(SmoothnessOutput0[uint3(offset + uint2(1, 0), depth)]);
			mipData += UnpackData(SmoothnessOutput0[uint3(offset + uint2(0, 1), depth)]);
			mipData += UnpackData(SmoothnessOutput0[uint3(offset + uint2(1, 1), depth)]);
			mipData *= 0.25;

			float3 averageNormal = normalize(mipData.xyz);
			uint3 dst = uint3(dispatchThreadID * 2 + uint2(x, y), depth);
			result[1][dst] = float4(averageNormal.xy, mipData.w, Remap(length(mipData.xyz), 2.0 / 3.0, 1.0, -1.0));
			mipDataSum += mipData;
		}
	}

	mipDataSum *= 0.25;
	float3 averageNormal = normalize(mipDataSum.xyz);
	uint3 dst = uint3(dispatchThreadID, depth);
	result[2][dst] = float4(averageNormal.xy, mipDataSum.w, Remap(length(mipDataSum.xyz), 2.0 / 3.0, 1.0, -1.0));

	mipDataShared[groupThreadID.x][groupThreadID.y] = mipDataSum;

    [unroll]
	for (uint s = ThreadCount >> 1, i = 3; s > 0; s >>= 1, i++)
	{
		GroupMemoryBarrierWithGroupSync();
		
		float4 mipDataSum = 0.0;
		if (all(groupThreadID < s))
		{
            // Load four normals and average
			mipDataSum = mipDataShared[groupThreadID.x][groupThreadID.y];
			mipDataSum += mipDataShared[groupThreadID.x + s][groupThreadID.y];
			mipDataSum += mipDataShared[groupThreadID.x][groupThreadID.y + s];
			mipDataSum += mipDataShared[groupThreadID.x + s][groupThreadID.y + s];
			mipDataSum *= 0.25;

			float3 averageNormal = normalize(mipDataSum.xyz);
			uint3 dst = uint3(groupThreadID, depth);
			result[i][dst] = float4(averageNormal.xy, mipDataSum.w, Remap(length(mipDataSum.xyz), 2.0 / 3.0, 1.0, -1.0));
		}
		
		GroupMemoryBarrierWithGroupSync();
		
		if (all(groupThreadID < s))
		{
			uint2 ind = (groupThreadID / 2) + (groupThreadID % 2) * (s / 2);
			mipDataShared[ind.x][ind.y] = mipDataSum;
		}
	}
}