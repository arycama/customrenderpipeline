#include "../Atmosphere.hlsl"
#include "../Common.hlsl"
#include "../Lighting.hlsl"
#include "../Random.hlsl"
#include "../VolumetricLight.hlsl"

#pragma kernel Compute
#pragma kernel FilterX KERNEL=FilterX HORIZONTAL
#pragma kernel FilterY KERNEL=FilterY VERTICAL
#pragma kernel Accumulate

RWTexture3D<float4> _Result;
Texture3D<float4> _Input;

float4x4 _PixelToWorldViewDir;
uint _VolumeTileSize;
float _BlurSigma;
float _VolumeWidth;
float _VolumeHeight;
float3 _InputScale, _InputMax;

[numthreads(8, 8, 8)]
void Compute(uint3 id : SV_DispatchThreadID)
{
	float jitter = Noise1D(id.xy);
	float3 worldDir = MultiplyVector(_PixelToWorldViewDir, float3(id.xy, 1.0), false);
	float rcpWorldDirLength = RcpLength(worldDir);
	worldDir *= rcpWorldDirLength;
	
	float eyeDepth = lerp(_VolumetricLightNear, _VolumetricLightFar, (id.z + jitter) / _VolumeSlices);
	float viewDistance = eyeDepth * rcp(rcpWorldDirLength);
	float3 worldPosition = worldDir * viewDistance;
	
	float2 positionNDC = (id.xy + 0.5) / float2(_VolumeWidth, _VolumeHeight);
	float2 pixelPosition = positionNDC * _ScaledResolution.xy;
	
	uint3 clusterIndex;
	clusterIndex.xy = floor(pixelPosition) / _TileSize;
	clusterIndex.z = log2(eyeDepth) * _ClusterScale + _ClusterBias;
	
	uint2 lightOffsetAndCount = _LightClusterIndices[clusterIndex];
	
	// Point lights
	float3 lighting = 0.0;
	for (uint i = 0; i < min(128, lightOffsetAndCount.y); i++)
	{
		LightData light = _PointLights[_LightClusterList[lightOffsetAndCount.x + i]];
		
		float3 lightVector = light.position - worldPosition;
		float sqrLightDist = dot(lightVector, lightVector);
		if (sqrLightDist >= Sq(light.range))
			continue;
		
		float rcpLightDist = rsqrt(sqrLightDist);
		float3 L = lightVector * rcpLightDist;

		float attenuation = Sq(min(rcp(0.01), rcpLightDist) * saturate(1.0 - Sq(sqrLightDist * rcp(Sq(light.range)))));
		if (!attenuation)
			continue;
		
		float height = HeightAtDistance(_ViewHeight, worldDir.y, viewDistance);
		float3 intensity = AtmosphereScatter(height, dot(L, worldDir));
		if(all(!intensity))
			continue;
			
		//if (light.shadowIndexVisibleFaces)
		//{
		//	uint shadowIndex = light.shadowIndexVisibleFaces >> 8;
		//	uint visibleFaces = light.shadowIndexVisibleFaces & 0xf;
		//	float dominantAxis = Max3(abs(lightVector));
		//	float depth = rcp(dominantAxis) * light.depthRemapScale + light.depthRemapOffset;
		//	attenuation *= _PointShadows.SampleCmpLevelZero(_LinearClampCompareSampler, float4(lightVector * float3(-1, 1, -1), shadowIndex), depth);
		//	if (!attenuation)
		//		continue;
		//}
		
		lighting += (attenuation * _Exposure) * (intensity * light.color);
	}
	
	// TODO: Ensure extinction is premultiplied by log2e
	float4 luminanceExtinction = float4(lighting, 0.0);
	
	// Reproject previous frame. Needs to use unjittered world position
	float3 unjitteredPositionCS;
	unjitteredPositionCS.xy = positionNDC * 2.0 - 1.0;
	unjitteredPositionCS.z = EyeToDeviceDepth(lerp(_VolumetricLightNear, _VolumetricLightFar, (id.z + 0.5) / _VolumeSlices));
	
	float4 prevPositionCS = PerspectiveDivide(WorldToClipPrevious(ClipToWorld(unjitteredPositionCS)));
	prevPositionCS.xy = 0.5 * prevPositionCS.xy + 0.5;
	
	float3 volumeUv = float3(prevPositionCS.xy, GetVolumetricUv(prevPositionCS.w));

	if (all(saturate(volumeUv) == volumeUv))
	{
		float4 previousLuminanceExtinction = _Input.SampleLevel(_LinearClampSampler, min(volumeUv * _InputScale, _InputMax), 0.0);
		luminanceExtinction = lerp(previousLuminanceExtinction, luminanceExtinction, 0.05);
	}
	
	_Result[id] = luminanceExtinction;
}

[numthreads(8, 8, 8)]
void KERNEL(uint3 id : SV_DispatchThreadID)
{
	float4 result = 0.0;
	float weightSum = 0.0;
	
	int radius = 2;
	for (int i = -radius; i <= radius; i++)
	{
		#ifdef HORIZONTAL
			int3 coord = id + int3(i, 0, 0);
		#else
			int3 coord = id + int3(0, i, 0);
		#endif
		
		if (any(coord < 0 || coord >= int3(_VolumeWidth, _VolumeHeight, _VolumeSlices)))
			continue;
		
		float4 luminanceExtinction = _Input[coord];
		float weight = exp(-Sq(i / _BlurSigma));
		result += luminanceExtinction * weight;
		weightSum += weight;
	}
	
	if (weightSum > 0.0)
		result /= weightSum;
	
	_Result[id] = result;
}

float _VolumeDistancePerSlice;
uint _VolumeSlicesInt;

[numthreads(8, 8, 1)]
void Accumulate(uint2 id : SV_DispatchThreadID)
{
	float3 worldDir = MultiplyVector(_PixelToWorldViewDir, float3(id.xy, 1.0), false);
	float rcpWorldDirLength = RcpLength(worldDir);
	worldDir *= rcpWorldDirLength;
	
	float ds = _VolumeDistancePerSlice * rcp(rcpWorldDirLength);
	
	float t = 0.5 * ds;
	float3 intTransmittance = 1.0;
	float4 result = float2(0.0, 1.0).xxxy;
	for (uint i = 0; i < _VolumeSlicesInt; i++, t+= ds)
	{
		float4 luminanceExtinction = _Input[uint3(id.xy, i)];
		
		// Attenuate due to atmosphere and local extinction
		float atmosphereHeight = HeightAtDistance(_ViewHeight, worldDir.y, t);
		float3 extinction = AtmosphereExtinction(atmosphereHeight) + luminanceExtinction.a;
		float3 transmittance = exp(-extinction * ds);
		float3 integScatt = (luminanceExtinction.rgb - luminanceExtinction.rgb * transmittance) / max(1e-7, extinction);
		
		result.rgb += intTransmittance * integScatt.rgb;
		intTransmittance *= transmittance;
		result.a *= exp(-luminanceExtinction.a * ds); // Accumulate result.a seperately as we don't want to apply atmospheric transmittance twice
		_Result[uint3(id, i)] = result;
	}
}