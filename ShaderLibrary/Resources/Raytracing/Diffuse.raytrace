#include "../../Common.hlsl"
#include "../../GBuffer.hlsl"
#include "../../Random.hlsl"
#include "../../Samplers.hlsl"
#include "../../Lighting.hlsl"

Texture2D<float4> _NormalRoughness;
Texture2D<float> _Depth;

RWTexture2D<float3> HitColor;
RWTexture2D<float4> HitResult;

RaytracingAccelerationStructure SceneRaytracingAccelerationStructure : register(t0, space1);

struct RayPayload
{
	float4 colorT;
};

#pragma editor_sync_compilation
#pragma max_recursion_depth 1

[shader("miss")]
void MissShader(inout RayPayload payload : SV_RayPayload)
{
	payload.colorT = 0;
}

[shader("raygeneration")]
void RayGeneration()
{
	uint2 position = DispatchRaysIndex().xy;
	float depth = _Depth[position];
	
	if(depth == 0.0)
		return;
	
	float3 N = GBufferNormal(position, _NormalRoughness);
	float3 noise3DCosine = Noise3DCosine(position);
	float3 L = ShortestArcQuaternion(N, noise3DCosine);
	float rcpPdf = Pi * rcp(noise3DCosine.z);
	float3 worldPosition = PixelToWorld(float3(position + 0.5, depth)) + _ViewPosition;
	
	float3 clipPos = float3((position + 0.5) / _ScaledResolution.xy * 2.0 - 1.0, depth);
	worldPosition = ClipToWorld(clipPos) + _ViewPosition;
	
	RayDesc ray;
	ray.Origin = worldPosition;
	ray.Direction = L;
	ray.TMin = 0.2;
	ray.TMax = 1e10f;
	
	RayPayload payload;
	payload.colorT = 0.0;
	
	TraceRay(SceneRaytracingAccelerationStructure, 0, 0xFF, 0, 1, 0, ray, payload);
	
	HitColor[position] = payload.colorT.xyz;
	HitResult[position] = float4(L, rcpPdf) * payload.colorT.w;
}
