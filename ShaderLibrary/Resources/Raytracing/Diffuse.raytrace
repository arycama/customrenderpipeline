#include "../../Common.hlsl"
#include "../../GBuffer.hlsl"
#include "../../Random.hlsl"
#include "../../Samplers.hlsl"
#include "../../Lighting.hlsl"
#include "../../Raytracing.hlsl"

Texture2D<float4> _NormalRoughness;
Texture2D<float> _Depth;

RWTexture2D<float3> HitColor;
RWTexture2D<float4> HitResult;

float _RaytracingBias, _RaytracingDistantBias;

RaytracingAccelerationStructure SceneRaytracingAccelerationStructure;

#pragma max_recursion_depth 1

[shader("miss")]
void MissShader(inout RayPayload payload : SV_RayPayload)
{
	payload.packedColor = 0.0;
	payload.hitDistance = 0.0;
}

[shader("raygeneration")]
void RayGeneration()
{
	uint2 position = DispatchRaysIndex().xy;
	float depth = _Depth[position];
	if(depth == 0.0)
		return;
	
	float3 N = GBufferNormal(position, _NormalRoughness);
	float3 noise3DCosine = Noise3DCosine(position);
	float3 L = ShortestArcQuaternion(N, noise3DCosine);
	float rcpPdf = Pi * rcp(noise3DCosine.z);
	float3 worldPosition = PixelToWorld(float3(position + 0.5, depth));
	
	// We also need to undo the planet curve, since it's not accounted for in the BLAS
	worldPosition = PlanetCurveInverse(worldPosition);
	
	RayDesc ray;
	ray.Origin = worldPosition + N * EvaluateRayTracingBias(worldPosition, _Near, _Far, _RaytracingBias * 10, _RaytracingDistantBias * 10);
	ray.Direction = L;
	ray.TMin = 0.0;
	ray.TMax = 1e10f;
	
	RayPayload payload;
	payload.packedColor = 0.0;
	payload.hitDistance = 0.0;
	
	TraceRay(SceneRaytracingAccelerationStructure, 0, 0xFF, 0, 1, 0, ray, payload);
	
	HitColor[position] = R11G11B10ToFloat3(payload.packedColor); // This is a bit redundant since we pack into a float3 anyway.. maybe just keep it packed?
	HitResult[position] = payload.hitDistance ? float4(L * payload.hitDistance, rcpPdf) : 0.0;
}
