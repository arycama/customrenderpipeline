#include "../../Common.hlsl"
#include "../../GBuffer.hlsl"
#include "../../Random.hlsl"
#include "../../Samplers.hlsl"
#include "../../Lighting.hlsl"
#include "../../ImageBasedLighting.hlsl"
#include "../../Raytracing.hlsl"
#include "../../Water/WaterPrepassCommon.hlsl"

RWTexture2D<float3> HitColor;
Texture2D<float> _Depth;

float _RaytracingBias, _RaytracingDistantBias, _SampleCount, _FocusDistance, _ApertureRadius, _Test;

[shader("miss")]
void MissShader(inout RayPayload payload : SV_RayPayload)
{
	payload.packedColor = 0.0;
	payload.hitDistance = 0.0;
}

[shader("raygeneration")]
void RayGeneration()
{
	float focusDistance = _FocusDistance;
	focusDistance = LinearEyeDepth(_Depth[_ScaledResolution.xy / 2]);

	uint2 position = DispatchRaysIndex().xy;
	
	float3 worldDir = PixelToWorldDir(position + 0.5, false);
	float offset = Noise1D(position.xy);
	float phi = offset * TwoPi;
	
	float3 worldPosition = focusDistance * worldDir + _ViewPosition;
	
	float3 color = 0;
	float weightSum = 0;
	for (float i = 0.0; i < _SampleCount; i++)
	{
		float2 uv = VogelDiskSample(i, _SampleCount, phi) * _ApertureRadius;
		float3 rayOrigin = _ViewPosition + MultiplyPoint3x4(_ViewToWorld, float3(uv, 0));
		float3 rayDirection = normalize(worldPosition - rayOrigin);
		
		RayDesc ray;
		ray.Origin = rayOrigin;
		ray.Direction = rayDirection;
		ray.TMin = 0.0;
		ray.TMax = 1e10f;
	
		RayPayload payload;
		payload.packedColor = 0.0;
		payload.hitDistance = 0.0;
	
		// In order to achieve filtering for the textures, we need to compute the spread angle of the pixel
		float distanceToCamera = length(rayOrigin);
		payload.cone.width = _RaytracingPixelSpreadAngle * distanceToCamera;
		payload.cone.spreadAngle = _RaytracingPixelSpreadAngle;
	
		uint flags = RAY_FLAG_CULL_BACK_FACING_TRIANGLES;
		TraceRay(SceneRaytracingAccelerationStructure, flags, 0xFF, 0, 1, 0, ray, payload);
	
		bool validHit = payload.hitDistance;
		if(!validHit)
			continue;
			
		color += R11G11B10ToFloat3(payload.packedColor);
		weightSum++;
	}
	
	if (weightSum)
		color *= rcp(weightSum);
	
	HitColor[position] = Rec709ToICtCp(color);
}
