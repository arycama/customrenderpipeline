#include "../../Common.hlsl"
#include "../../GBuffer.hlsl"
#include "../../Random.hlsl"
#include "../../Samplers.hlsl"
#include "../../Lighting.hlsl"
#include "../../Raytracing.hlsl"

RWTexture2D<float4> HitResult, HitColor;
Texture2D<float> _Depth;
Texture2D<float4> _NormalRoughness;
float _Radius, _RawRadius, _AoStrength, _FalloffScale, _FalloffBias, _SampleCount;
float _RaytracingBias, _RaytracingDistantBias;

#pragma max_recursion_depth 1

[shader("miss")]
void MissShader(inout RayPayloadAmbientOcclusion payload : SV_RayPayload)
{
	payload.hitDistance = 0.0;
}

[shader("raygeneration")]
void RayGeneration()
{
	uint2 position = DispatchRaysIndex().xy;
	float depth = _Depth[position];
	if(depth == 0.0)
		return;
	
	float3 worldPosition = PixelToWorld(float3(position + 0.5, depth));
	float3 V = normalize(-worldPosition);
	
	float NdotV;
	float3 N = GBufferNormal(position, _NormalRoughness, V, NdotV);
	
	float3 noise3DCosine = Noise3DCosine(position);
	float rcpPdf = Pi * rcp(noise3DCosine.z);
	float3 L = FromToRotationZ(N, noise3DCosine);
	
	// We also need to undo the planet curve, since it's not accounted for in the BLAS
	worldPosition = PlanetCurveInverse(worldPosition);
	
	RayDesc ray;
	ray.Origin = worldPosition + N * EvaluateRayTracingBias(worldPosition, _Near, _Far, _RaytracingBias * 10, _RaytracingDistantBias * 10);
	ray.Direction = L;
	ray.TMin = 0.0;
	ray.TMax = _RawRadius;
	
	RayPayloadAmbientOcclusion payload;
	payload.hitDistance = 0.0;
		
	uint flags = RAY_FLAG_CULL_BACK_FACING_TRIANGLES;
	TraceRay(SceneRaytracingAccelerationStructure, flags, 0xFF, 0, 1, 0, ray, payload);
	
	bool validHit = payload.hitDistance;
	float outDepth;
	float3 color, hitRay;
	if(validHit)
	{
		color = 0.0;
		hitRay = L * payload.hitDistance;
		outDepth = Linear01Depth(depth);
	}
	else
	{
		color = 0.0;
		hitRay = L;
		outDepth = 0.0;
	}
	
	HitColor[position] = float4(color, rcpPdf);
	HitResult[position] = float4(hitRay, outDepth);
}
