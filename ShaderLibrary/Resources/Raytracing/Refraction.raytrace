#include "../../Common.hlsl"
#include "../../GBuffer.hlsl"
#include "../../Random.hlsl"
#include "../../Samplers.hlsl"
#include "../../Lighting.hlsl"
#include "../../ImageBasedLighting.hlsl"
#include "../../Raytracing.hlsl"
#include "../../Water/WaterPrepassCommon.hlsl"

Texture2D<float4> _NormalRoughness;
Texture2D<float> _Depth;

//RWTexture2D<float4> HitResult;
//RWTexture2D<float4> HitColor;
RWTexture2D<float3> RefractionResult, ScatterResult;
Texture2D<uint2> _Stencil;

float3 _Extinction;
float _RaytracingBias, _RaytracingDistantBias;
float3 _LightDirection0, _LightColor0, _Color;

[shader("miss")]
void MissShader(inout RayPayload payload : SV_RayPayload)
{
	payload.packedColor = 0.0;
	payload.hitDistance = 0.0;
}

[shader("raygeneration")]
void RayGeneration()
{
	uint2 position = DispatchRaysIndex().xy;
	float depth = _Depth[position];
	uint stencil = _Stencil[position].g;
	bool isWater = stencil & 4;
	
	if (depth == 0.0 || !isWater)
		return;
	
	float4 normalRoughness = _NormalRoughness[position];
	float2 u = Noise2D(position);
	
	float3 worldPosition = PixelToWorld(float3(position + 0.5, depth));
	float3 V = normalize(-worldPosition);
	
	float NdotV;
	float3 N = GBufferNormal(normalRoughness, V, NdotV);
	
	// We also need to undo the planet curve, since it's not accounted for in the BLAS
	worldPosition = PlanetCurveInverse(worldPosition);
	
	float roughness = Sq(normalRoughness.a);
	
	bool isFrontFace;
	float3 triangleNormal = GetTriangleNormal(position.xy, V, isFrontFace);
	
	//float rcpPdf;
	float eta = isFrontFace ? rcp(1.34) : 1.34;
	float3 L = refract(-V, N, eta); //	ImportanceSampleGGX(roughness, N, V, u, NdotV, rcpPdf);
	bool isTotalInternalReflection = all(L == 0.0);
	//rcpPdf = 1;
	
	float _RaytracingBias = 0.1, _RaytracingDistantBias = 0.1;
	
	RayDesc ray;
	ray.Origin = worldPosition + _ViewPosition + N * EvaluateRayTracingBias(worldPosition, _Near, _Far, _RaytracingBias, _RaytracingDistantBias);
	ray.Direction = L;
	ray.TMin = 0.0;
	ray.TMax = 1e10f;
	
	RayPayload payload;
	payload.packedColor = 0.0;
	payload.hitDistance = 0.0;
	
	// In order to achieve filtering for the textures, we need to compute the spread angle of the pixel
	float distanceToCamera = length(worldPosition);
	payload.cone.width = _RaytracingPixelSpreadAngle * distanceToCamera;
	payload.cone.spreadAngle = _RaytracingPixelSpreadAngle + RoughnessToSpreadAngle(roughness);
	
	if (!isTotalInternalReflection)
	{
		uint flags = RAY_FLAG_CULL_BACK_FACING_TRIANGLES;
		TraceRay(SceneRaytracingAccelerationStructure, flags, 0xFF, 0, 1, 0, ray, payload);
	}
	
	bool validHit = payload.hitDistance;
	float outDepth;
	float3 color, hitRay;
	if (validHit && !isTotalInternalReflection)
	{
		hitRay = L * payload.hitDistance;
		color = R11G11B10ToFloat3(payload.packedColor);
		outDepth = Linear01Depth(depth);
		//color *= exp(-_Extinction * (isFrontFace ? payload.hitDistance : length(worldPosition)));
	}
	else
	{
		color = isFrontFace || isTotalInternalReflection ? 0.0 : _SkyReflection.SampleLevel(_LinearClampSampler, L, 0.0);
		hitRay = L;
		outDepth = 0.0;
	}
	
	RefractionResult[position] = color;
	
	// Select random channel
	float2 noise = Noise2D(position.xy);
	float3 channelMask = (noise.y < 1.0 / 3.0 ? 0 : (noise.y < 2.0 / 3.0 ? 1 : 2)) == float3(0.0, 1.0, 2.0);
	float xi = min(noise.x, 0.999); // xi of 1 maps to infinity, so clamp
	float t;
	float3 pdf;
	float3 c = _Extinction;
	if (validHit)
	{
		// Bounded homogenous sampling
		float b = payload.hitDistance;
		float3 dist = -log(1.0 - xi * (1.0 - exp(-c * b))) / c;
		t = dot(channelMask, dist);
		pdf = c / (exp(c * t) - exp(c * t - c * b)); // Alternate formulation which cancels out some terms and avoids nans
	}
	else
	{
		// Infinite homogenous sampling
		t = dot(channelMask, -log(1.0 - xi) * rcp(c));
		pdf = c * exp(-c * t);
	}
	
	float weight = rcp(dot(pdf, rcp(3.0)));
	float3 P = ray.Origin + ray.Direction * t - _ViewPosition;
	
	float3 luminance = 0.0;
	float planetDistance = DistanceToBottomAtmosphereBoundary(_ViewHeight, -V.y);
	
	// Todo: share/merge with non raytraced code?
	//#if defined(LIGHT_COUNT_ONE) || defined(LIGHT_COUNT_TWO)
		float attenuation = GetShadow(P, 0, false);
		if(attenuation > 0.0)
		{
			attenuation *= CloudTransmittance(P);
			if(attenuation > 0.0)
			{
				float shadowDistance0 = max(0.0, worldPosition.y - P.y) / max(1e-6, saturate(_LightDirection0.y));
				float3 shadowPosition = MultiplyPoint3x4(_WaterShadowMatrix1, P);
				if (all(saturate(shadowPosition.xyz) == shadowPosition.xyz))
				{
					float shadowDepth = _WaterShadows.SampleLevel(_LinearClampSampler, shadowPosition.xy, 0.0);
					shadowDistance0 = saturate(shadowDepth - shadowPosition.z) * _WaterShadowFar;
				}
			
				float3 asymmetry = exp(-_Extinction * (shadowDistance0 + t));
				float LdotV0 = dot(_LightDirection0, L);
				float lightCosAngleAtDistance0 = CosAngleAtDistance(_ViewHeight, _LightDirection0.y, planetDistance * LdotV0, _PlanetRadius);
				float phase = lerp(MiePhase(LdotV0, -0.3) , MiePhase(LdotV0, 0.85), asymmetry);
				float3 lightColor0 = phase * _LightColor0 * AtmosphereTransmittance(_PlanetRadius, lightCosAngleAtDistance0);
				luminance += lightColor0 * attenuation * asymmetry;
			}
		}
	
	//	#ifdef LIGHT_COUNT_TWO
	//		float shadowDistance1 = max(0.0, positionWS.y - P.y) / max(1e-6, saturate(_LightDirection1.y));
	//		float LdotV1 = dot(_LightDirection1, -V);
	//		float lightCosAngleAtDistance1 = CosAngleAtDistance(_ViewHeight, _LightDirection1.y, planetDistance * LdotV1, _PlanetRadius);
	//		float3 lightColor1 = RcpPi * _LightColor1 * AtmosphereTransmittance(_PlanetRadius, lightCosAngleAtDistance1);
	//		luminance += lightColor1 * exp(-_Extinction * (shadowDistance1 + t));
	//	#endif
	//#endif
	
	luminance *= _Extinction * weight * _Exposure;
	
	// Ambient 
	float3 finalTransmittance = exp(-t * _Extinction);
	//luminance += AmbientLight(float3(0.0, 1.0, 0.0)) * (1.0 - finalTransmittance);
	
	ScatterResult[position] = 0;
}
