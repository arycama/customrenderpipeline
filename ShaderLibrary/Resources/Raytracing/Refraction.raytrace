#include "../../Common.hlsl"
#include "../../GBuffer.hlsl"
#include "../../Random.hlsl"
#include "../../Samplers.hlsl"
#include "../../Lighting.hlsl"
#include "../../ImageBasedLighting.hlsl"
#include "../../Raytracing.hlsl"

Texture2D<float4> _NormalRoughness;
Texture2D<float> _Depth;

//RWTexture2D<float4> HitResult;
//RWTexture2D<float4> HitColor;
RWTexture2D<float3> Result;
Texture2D<uint2> _Stencil;

float3 _Extinction;
float _RaytracingBias, _RaytracingDistantBias;

[shader("miss")]
void MissShader(inout RayPayload payload : SV_RayPayload)
{
	payload.packedColor = 0.0;
	payload.hitDistance = 0.0;
}

[shader("raygeneration")]
void RayGeneration()
{
	uint2 position = DispatchRaysIndex().xy;
	float depth = _Depth[position];
	uint stencil = _Stencil[position].g;
	bool isWater = stencil & 4;
	
	if (depth == 0.0 || !isWater)
		return;
	
	float4 normalRoughness = _NormalRoughness[position];
	float2 u = Noise2D(position);
	
	float3 worldPosition = PixelToWorld(float3(position + 0.5, depth));
	float3 V = normalize(-worldPosition);
	
	float NdotV;
	float3 N = GBufferNormal(normalRoughness, V, NdotV);
	
	// We also need to undo the planet curve, since it's not accounted for in the BLAS
	worldPosition = PlanetCurveInverse(worldPosition);
	
	float roughness = Sq(normalRoughness.a);
	float rcpPdf;
	float3 L = -V;//	refract(-V, N, rcp(1.34)); //	ImportanceSampleGGX(roughness, N, V, u, NdotV, rcpPdf);
	rcpPdf = 1;
	
	float _RaytracingBias = 0.1, _RaytracingDistantBias = 0.1;
	
	RayDesc ray;
	ray.Origin = worldPosition + N * EvaluateRayTracingBias(worldPosition, _Near, _Far, _RaytracingBias, _RaytracingDistantBias);
	ray.Direction = L;
	ray.TMin = 0.0;
	ray.TMax = 1e10f;
	
	RayPayload payload;
	payload.packedColor = 0.0;
	payload.hitDistance = 0.0;
	
	// In order to achieve filtering for the textures, we need to compute the spread angle of the pixel
	float distanceToCamera = length(worldPosition);
	payload.cone.width = _RaytracingPixelSpreadAngle * distanceToCamera;
	payload.cone.spreadAngle = _RaytracingPixelSpreadAngle + RoughnessToSpreadAngle(roughness);
	
	uint flags = RAY_FLAG_CULL_BACK_FACING_TRIANGLES;
	TraceRay(SceneRaytracingAccelerationStructure, flags, 0xFF, 0, 1, 0, ray, payload);
	
	bool validHit = payload.hitDistance;
	float outDepth;
	float3 color, hitRay;
	if(validHit)
	{
		hitRay = L * payload.hitDistance;
		color = R11G11B10ToFloat3(payload.packedColor);
		outDepth = Linear01Depth(depth);
	}
	else
	{
		color = 0.0;
		hitRay = L;
		outDepth = 0.0;
	}
	
	Result[position] = color;// * exp(-_Extinction * payload.hitDistance);
	
	//HitColor[position] = float4(color, rcpPdf);
	//HitResult[position] = float4(hitRay, outDepth);
}
