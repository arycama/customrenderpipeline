#pragma kernel PrefixScan0 KERNEL=PrefixScan0 WRITE_FINAL_COUNT
#pragma kernel PrefixScan1 KERNEL=PrefixScan1 WRITE_DRAW_CALL_COUNT
#pragma kernel StreamCompaction

const static uint threadCount = 1024;
const static uint log2ThreadCount = log2(threadCount);

uint MaxThread;

RWStructuredBuffer<uint> PrefixSumsWrite, GroupSumsWrite, DrawCallArgsWrite;
RWStructuredBuffer<float3x4> _ObjectToWorldWrite;

StructuredBuffer<uint> Input;
StructuredBuffer<uint> GroupSums, PrefixSums;
StructuredBuffer<float3x4> _Positions;

groupshared uint sharedSums[2][threadCount];

[numthreads(threadCount, 1, 1)]
void KERNEL(uint id : SV_DispatchThreadID, uint groupIndex : SV_GroupIndex, uint groupId : SV_GroupID)
{
	uint value = id < MaxThread ? Input[id] : 0;
	sharedSums[0][groupIndex] = value;
	GroupMemoryBarrierWithGroupSync();
	
	[unroll]
	for (uint i = 0; i < log2ThreadCount; i++)
	{
		bool input = i & 1;
		uint offset = 1 << i;
		
		if (groupIndex >= offset)
			value += sharedSums[input][groupIndex - offset];
		
		uint output = (i & 1) == 0;
		sharedSums[output][groupIndex] = value;
		GroupMemoryBarrierWithGroupSync();
	}
	
	PrefixSumsWrite[id] = value;
	
	// Final thread writes out total count for next pass
	if(groupIndex < threadCount - 1)
		return;
		
#ifdef WRITE_FINAL_COUNT
	GroupSumsWrite[groupId] = value;
#endif

#ifdef WRITE_DRAW_CALL_COUNT
	DrawCallArgsWrite[1] = value;
#endif
}

[numthreads(threadCount, 1, 1)]
void StreamCompaction(uint id : SV_DispatchThreadID, uint groupId : SV_GroupID)
{
	if (id >= MaxThread || !Input[id])
		return;

	// Since this is an inclusive prefix scan, subtract 1 from the f
	uint dest = PrefixSums[id] - 1;
	if (groupId)
		dest += GroupSums[groupId - 1];
	
	_ObjectToWorldWrite[dest] = _Positions[id];
}