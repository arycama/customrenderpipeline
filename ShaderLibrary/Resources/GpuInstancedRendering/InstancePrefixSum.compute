#include "../../PrefixSum.hlsl"

#pragma kernel PrefixScan0 KERNEL=PrefixScan0 WRITE_FINAL_COUNT
#pragma kernel PrefixScan1 KERNEL=PrefixScan1 WRITE_DRAW_CALL_COUNT

const static uint threadCount = 1024;

uint MaxThread;
RWStructuredBuffer<uint> PrefixSumsWrite, GroupSumsWrite, TotalInstanceCount;
StructuredBuffer<uint> Input;

groupshared uint temp[2 * threadCount];

uint GroupId;

void PrefixSumSharedWrite(uint index, uint data)
{
	temp[index] = data;
}

uint PrefixSumSharedRead(uint index)
{
	return temp[index];
}

void PrefixSumOutputTotalCount(uint totalSum)
{
	#ifdef WRITE_FINAL_COUNT
		GroupSumsWrite[GroupId] = totalSum;
	#endif

	#ifdef WRITE_DRAW_CALL_COUNT
		TotalInstanceCount[0] = totalSum;
	#endif
}

[numthreads(threadCount, 1, 1)]
void KERNEL(uint dispatchThreadId : SV_DispatchThreadID, uint groupIndex : SV_GroupIndex, uint groupId : SV_GroupID)
{
	GroupId = groupId;
	
	// A: load input into shared memory
	temp[2 * groupIndex + 0] = Input[2 * dispatchThreadId + 0];
	temp[2 * groupIndex + 1] = Input[2 * dispatchThreadId + 1];

	GroupMemoryBarrierWithGroupSync();
	
	PrefixSum(groupIndex, threadCount * 2);
	
	// E
	PrefixSumsWrite[2 * dispatchThreadId + 0] = temp[2 * groupIndex + 0];
	PrefixSumsWrite[2 * dispatchThreadId + 1] = temp[2 * groupIndex + 1];
}