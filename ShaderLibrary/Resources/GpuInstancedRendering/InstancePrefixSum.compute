#include "../../PrefixSum.hlsl"

#pragma kernel PrefixScan0 KERNEL=PrefixScan0 WRITE_FINAL_COUNT
#pragma kernel PrefixScan1 KERNEL=PrefixScan1 WRITE_DRAW_CALL_COUNT

const static uint threadCount = 1024;
const static uint log2ThreadCount = firstbitlow(threadCount);

uint MaxThread;

RWStructuredBuffer<uint> PrefixSumsWrite, GroupSumsWrite, DrawCallArgsWrite;
RWStructuredBuffer<float3x4> _ObjectToWorldWrite;

StructuredBuffer<uint> Input;
StructuredBuffer<uint> GroupSums, PrefixSums;
StructuredBuffer<float3x4> _Positions;

groupshared uint sharedSums[threadCount];

void PrefixSumSharedWrite(uint index, uint data)
{
	sharedSums[index] = data;
}

uint PrefixSumSharedRead(uint index)
{
	return sharedSums[index];
}

[numthreads(threadCount, 1, 1)]
void KERNEL(uint dispatchThreadId : SV_DispatchThreadID, uint groupIndex : SV_GroupIndex, uint groupId : SV_GroupID)
{
	// Load input into shared memory
	sharedSums[groupIndex] = dispatchThreadId < MaxThread ? Input[dispatchThreadId] : 0;

	uint totalSum;
	PrefixSum(groupIndex, threadCount, log2ThreadCount, totalSum);

	#ifdef WRITE_FINAL_COUNT
		if(!groupIndex)
			GroupSumsWrite[groupId] = totalSum;
	#endif

	#ifdef WRITE_DRAW_CALL_COUNT
		if(!groupIndex)
			DrawCallArgsWrite[1] = totalSum;
	#endif
	
	GroupMemoryBarrierWithGroupSync();
	
	if (dispatchThreadId >= MaxThread)
		return;
		
	// Store to main memory
	PrefixSumsWrite[dispatchThreadId] = sharedSums[groupIndex];
}
