#include "../../PrefixSum.hlsl"

#pragma kernel PrefixScan0 KERNEL=PrefixScan0 WRITE_FINAL_COUNT
#pragma kernel PrefixScan1 KERNEL=PrefixScan1 WRITE_DRAW_CALL_COUNT

const static uint threadCount = 1024;
const static uint log2ThreadCount = firstbitlow(threadCount);

uint MaxThread;
RWStructuredBuffer<uint> PrefixSumsWrite, GroupSumsWrite, TotalInstanceCount;
StructuredBuffer<uint> Input;

groupshared uint sharedSums[threadCount];

uint GroupId;

void PrefixSumSharedWrite(uint index, uint data)
{
	sharedSums[index] = data;
}

uint PrefixSumSharedRead(uint index)
{
	return sharedSums[index];
}

void PrefixSumOutputTotalCount(uint index, uint totalSum)
{
	#ifdef WRITE_FINAL_COUNT
		if(index == threadCount - 1)
			GroupSumsWrite[GroupId] = totalSum;
	#endif

	#ifdef WRITE_DRAW_CALL_COUNT
		if(index  == threadCount - 1)
			TotalInstanceCount[0] = totalSum;
	#endif
}

[numthreads(threadCount, 1, 1)]
void KERNEL(uint dispatchThreadId : SV_DispatchThreadID, uint groupIndex : SV_GroupIndex, uint groupId : SV_GroupID)
{
	GroupId = groupId;

	// Load input into shared memory
	sharedSums[groupIndex] = dispatchThreadId < MaxThread ? Input[dispatchThreadId] : 0;

	PrefixSum(groupIndex, threadCount, log2ThreadCount);
	
	GroupMemoryBarrierWithGroupSync();
	
	// Store to main memory
	if (dispatchThreadId < MaxThread)
		PrefixSumsWrite[dispatchThreadId] = sharedSums[groupIndex];
}
