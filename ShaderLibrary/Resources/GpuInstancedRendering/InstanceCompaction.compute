#pragma kernel StreamCompaction

RWStructuredBuffer<uint> _VisibleRendererInstanceIndices;
Buffer<uint> _RendererInstanceIDs;
uint _RendererInstanceIDsCount;

// Checks each renderer of each instance for visbility. If visible, it writes the index of the instance matrix to a buffer.
// One thread per instance.
[numthreads(1024, 1, 1)]
void StreamCompaction(uint id : SV_DispatchThreadID)
{
	// Check that we're not out of bounds
	if (id >= _RendererInstanceIDsCount)
		return;
	
	// Get the stored Instance ID, ensure it is not 0/invisible
	uint instanceID = _RendererInstanceIDs[id];
	if (instanceID == 0)
		return;

	uint dstOffset = _VisibleRendererInstanceIndices.IncrementCounter();
	
	// Write the final destination index
	// -1, as we +1 when initially writing so that 0 can be used for culled renderers
	_VisibleRendererInstanceIndices[dstOffset] = instanceID - 1;
}