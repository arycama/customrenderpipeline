#pragma kernel InstanceCompaction

// Since we use groupId to index the instance prefix sum, this needs to match
const static uint threadCount = 1024;
const static uint log2ThreadCount = firstbitlow(threadCount);

uint MaxThread;
float3 CameraForward, ViewPosition;

RWStructuredBuffer<uint> Output;
RWStructuredBuffer<uint> SortKeysWrite;

StructuredBuffer<uint> Input;
StructuredBuffer<uint> GroupSums, PrefixSums;
StructuredBuffer<float4> InstanceBounds;

[numthreads(threadCount, 1, 1)]
void InstanceCompaction(uint id : SV_DispatchThreadID, uint groupId : SV_GroupID, uint groupIndex : SV_GroupIndex)
{
	if (id >= MaxThread || !Input[id])
		return;

	uint dest = PrefixSums[id] + GroupSums[groupId];
	Output[dest] = id;
	
	// Compute sort key from instanceType, lod and viewDistance
	float4 boundsData = InstanceBounds[id];
	float3 worldBoundsCenter = boundsData.xyz - ViewPosition;
	
	float viewZ = max(0, dot(CameraForward, worldBoundsCenter));
	uint sortKey = viewZ;
	SortKeysWrite[dest] = sortKey;
}
