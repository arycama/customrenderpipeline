#include "../../Math.hlsl"
#include "../../PrefixSum.hlsl"

#pragma kernel RadixCount COUNT
#pragma kernel RadixScan SCAN
#pragma kernel RadixScatter SCATTER
#pragma enable_d3d11_debug_symbols

#ifdef SCAN
	const static uint threadCount = 1024;
#else
const static uint threadCount = 256;
#endif

const static uint log2ThreadCount = firstbitlow(threadCount);

StructuredBuffer<uint> TotalInstanceCount, CountKeys, CountData;
uint BitIndex;

groupshared uint sharedSums[threadCount];

RWStructuredBuffer<uint> CountResult, CountKeysResult, CountDataResult;
groupshared uint SharedTotalFalses;

StructuredBuffer<uint> Count, TotalGroupCount;
RWStructuredBuffer<uint> ScanResult, TotalFalsesResult;

RWStructuredBuffer<uint> ScatterDataResult, ScatterKeysResult;
StructuredBuffer<uint> ScatterKeys, ScatterData, TotalFalses, GroupScans, ScatterCounts;

void PrefixSumSharedWrite(uint index, uint data)
{
	sharedSums[index] = data;
}

uint PrefixSumSharedRead(uint index)
{
	return sharedSums[index];
}

[numthreads(threadCount, 1, 1)]
void RadixCount(uint id : SV_DispatchThreadID, uint groupIndex : SV_GroupIndex, uint groupId : SV_GroupID)
{
	// Count the elements for this block
	bool outOfRange = id >= TotalInstanceCount[0];
	uint key = outOfRange ? 0xFFFFFFFF : CountKeys[id];
	uint data = outOfRange ? 0 : CountData[id];
	bool bit = (key >> BitIndex) & 0x1;
		
	sharedSums[groupIndex] = !bit;
	
	GroupMemoryBarrierWithGroupSync();
	
	uint totalFalses;
	PrefixSum(groupIndex, threadCount, log2ThreadCount, totalFalses);
	
	if (!groupIndex)
		SharedTotalFalses = totalFalses;
		
	GroupMemoryBarrierWithGroupSync();
	
	// Shuffle in group memory based on counter
	uint f = sharedSums[groupIndex];
	uint t = groupIndex - f + SharedTotalFalses;
	uint d = bit ? t : f;
		
	// Write to global memory
	CountKeysResult[groupId * threadCount + d] = key;
	CountDataResult[groupId * threadCount + d] = data;
	
	// Write the final count out to global memory
	if (!groupIndex)
		CountResult[groupId] = totalFalses;
}

[numthreads(threadCount, 1, 1)]
void RadixScan(uint groupIndex : SV_GroupIndex)
{
	bool outOfRange = groupIndex >= TotalGroupCount[0];

	// Prefix sum the counts
	sharedSums[groupIndex] = outOfRange ? 0 : Count[groupIndex];
	
	GroupMemoryBarrierWithGroupSync();
	
	uint totalFalses;
	PrefixSum(groupIndex, threadCount, log2ThreadCount, totalFalses);
	
	GroupMemoryBarrierWithGroupSync();
	
	// Write the total prefix sum for each group
	ScanResult[groupIndex] = sharedSums[groupIndex];
	
	// Write the toal global number of falses
	if (!groupIndex)
		TotalFalsesResult[0] = totalFalses;
}

[numthreads(threadCount, 1, 1)]
void RadixScatter(uint id : SV_DispatchThreadID, uint groupIndex : SV_GroupIndex, uint groupId : SV_GroupID)
{
	uint key = ScatterKeys[id];
	uint data = ScatterData[id];
	bool bit = (key >> BitIndex) & 0x1;
	
	uint groupScan = GroupScans[groupId];
	uint localOffset = bit ? ScatterCounts[groupId] : 0;
	uint globalOffset = bit ? groupId * threadCount + TotalFalses[0] - groupScan : groupScan;
	uint globalDest = groupIndex - localOffset + globalOffset;
	
	// Write final results
	ScatterDataResult[globalDest] = data;
	ScatterKeysResult[globalDest] = key;
}
