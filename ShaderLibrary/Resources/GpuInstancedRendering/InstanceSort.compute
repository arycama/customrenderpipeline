#include "../../Math.hlsl"
#include "../../PrefixSum.hlsl"

#pragma kernel RadixCount COUNT
#pragma kernel RadixScan SCAN
#pragma kernel RadixScatter SCATTER

const static uint threadCount = 256;

RWStructuredBuffer<uint> KeysResult, DataResult;
RWStructuredBuffer<uint4> CountResult, ScanResult;
StructuredBuffer<uint> Keys, Data, TotalGroupCount;
StructuredBuffer<uint4> GroupCounts, GroupScans;
uint BitIndex;

groupshared uint sharedSums[threadCount];

cbuffer DataLength
{
	uint TotalLength;
	uint pad0;
	uint pad1;
	uint pad2;
};

void PrefixSumSharedWrite(uint index, uint data)
{
	sharedSums[index] = data;
}

uint PrefixSumSharedRead(uint index)
{
	return sharedSums[index];
}

uint Select4(bool4 condition, uint4 values)
{
	return condition.x ? values.x : (condition.y ? values.y : condition.z ? values.z : values.w);
}

[numthreads(threadCount, 1, 1)]
void RadixCount(uint id : SV_DispatchThreadID, uint groupIndex : SV_GroupIndex, uint groupId : SV_GroupID)
{
	// Count the elements for this block
	bool outOfRange = id >= TotalLength;
	uint key = outOfRange ? 0xFFFFFFFF : Keys[id];
	uint data = outOfRange ? 0 : Data[id];
	uint value = (key >> BitIndex) & 0x1;
	
	// Count and sort
	uint4 sums, offsets;
	offsets.x = PrefixSum(value == 0, groupIndex, threadCount, sums.x);
	offsets.y = PrefixSum(value == 1, groupIndex, threadCount, sums.y) + sums.x;
	offsets.z = PrefixSum(value == 2, groupIndex, threadCount, sums.z) + sums.x + sums.y;
	offsets.w = PrefixSum(value == 3, groupIndex, threadCount, sums.w) + sums.x + sums.y + sums.z;
	
	if (!groupIndex)
		CountResult[groupId] = sums;
		
	uint d = offsets[value];
	
	// Write to global memory
	KeysResult[groupId * threadCount + d] = key;
	DataResult[groupId * threadCount + d] = data;
}

[numthreads(threadCount, 1, 1)]
void RadixScan(uint groupIndex : SV_GroupIndex)
{
	// Prefix sum the counts
	bool outOfRange = groupIndex >= TotalGroupCount[0];
	uint4 data = outOfRange ? 0 : GroupCounts[groupIndex];
	
	uint4 sums, offsets;
	offsets.x = PrefixSum(data.x, groupIndex, threadCount, sums.x);
	offsets.y = PrefixSum(data.y, groupIndex, threadCount, sums.y) + sums.x;
	offsets.z = PrefixSum(data.z, groupIndex, threadCount, sums.z) + sums.x + sums.y;
	offsets.w = PrefixSum(data.w, groupIndex, threadCount, sums.w) + sums.x + sums.y + sums.z;
	
	ScanResult[groupIndex] = offsets;
}

[numthreads(threadCount, 1, 1)]
void RadixScatter(uint id : SV_DispatchThreadID, uint groupIndex : SV_GroupIndex, uint groupId : SV_GroupID)
{
	if (id >= TotalLength)
		return;

	uint key = Keys[id];
	uint value = (key >> BitIndex) & 0x1;
	
	uint4 localOffsets = GroupCounts[groupId];
	
	uint localOffset = value ? localOffsets[value - 1] : 0;
	
	uint globalDest = groupIndex - localOffset + GroupScans[groupId][value];
	
	// Write final results
	DataResult[globalDest] = Data[id];
	KeysResult[globalDest] = key;
}
