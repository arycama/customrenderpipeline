#include "../../Math.hlsl"
#include "../../PrefixSum.hlsl"

#pragma kernel InstanceSort
#pragma enable_d3d11_debug_symbols

RWStructuredBuffer<uint> Result;
StructuredBuffer<uint> Input;
StructuredBuffer<uint> TotalInstanceCount, SortKeys;
RWStructuredBuffer<uint> SortKeysWrite;

const static uint threadCount = 256;
const static uint log2ThreadCount = firstbitlow(threadCount);

groupshared uint sharedKeys[threadCount];
groupshared uint sharedIndices[threadCount];
groupshared uint sharedSums[threadCount];

groupshared uint sharedTotalFalses;

void PrefixSumSharedWrite(uint index, uint data)
{
	sharedSums[index] = data;
}

uint PrefixSumSharedRead(uint index)
{
	return sharedSums[index];
}

[numthreads(threadCount, 1, 1)]
void InstanceSort(uint id : SV_DispatchThreadID, uint groupIndex : SV_GroupIndex, uint groupId : SV_GroupID)
{
	bool outOfRange = id >= TotalInstanceCount[0];
	sharedKeys[groupIndex] = outOfRange ? 0xFFFFFFFF : SortKeys[id];
	sharedIndices[groupIndex] = groupIndex;
	
	for (uint i = 0; i < 32; i++)
	{
		GroupMemoryBarrierWithGroupSync();

		uint srcIndex = sharedIndices[groupIndex];
		uint key = sharedKeys[srcIndex];
		bool bit = (key >> i) & 0x1;
		
		sharedSums[groupIndex] = !bit;
		
		uint totalFalses;
		PrefixSum(groupIndex, threadCount, log2ThreadCount, totalFalses);
		
		if (!groupIndex)
			sharedTotalFalses = totalFalses;
			
		GroupMemoryBarrierWithGroupSync();
		
		uint f = sharedSums[groupIndex];
		uint t = groupIndex - f + sharedTotalFalses;
		uint d = bit ? t : f;
		sharedIndices[d] = srcIndex;
	}
	
	GroupMemoryBarrierWithGroupSync();
	
	// Write final results
	uint finalSrc = groupId * threadCount + sharedIndices[groupIndex];
	Result[id] = Input[finalSrc];
	SortKeysWrite[id] = SortKeys[finalSrc];
}