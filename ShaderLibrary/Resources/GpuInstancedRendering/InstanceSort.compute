#include "../../Math.hlsl"
#include "../../PrefixSum.hlsl"

#pragma kernel RadixCount COUNT
#pragma kernel RadixScan SCAN
#pragma kernel RadixScatter SCATTER

const static uint threadCount = 256;

RWStructuredBuffer<uint> KeysResult, DataResult, CountResult, ScanResult;
StructuredBuffer<uint> Keys, Data, GroupCounts, TotalGroupCount, TotalFalses, GroupScans;
uint BitIndex;

groupshared uint sharedSums[threadCount];

cbuffer DataLength
{
	uint TotalLength;
	uint pad0;
	uint pad1;
	uint pad2;
};

void PrefixSumSharedWrite(uint index, uint data)
{
	sharedSums[index] = data;
}

uint PrefixSumSharedRead(uint index)
{
	return sharedSums[index];
}

[numthreads(threadCount, 1, 1)]
void RadixCount(uint id : SV_DispatchThreadID, uint groupIndex : SV_GroupIndex, uint groupId : SV_GroupID)
{
	// Count the elements for this block
	bool outOfRange = id >= TotalLength;
	uint key = outOfRange ? 0xFFFFFFFF : Keys[id];
	uint data = outOfRange ? 0 : Data[id];
	bool bit = (key >> BitIndex) & 0x1;
	
	// Shuffle in group memory based on counter
	uint totalFalses;
	uint f = PrefixSum(!bit, groupIndex, threadCount, totalFalses);
	
	if (!groupIndex)
		CountResult[2 * groupId + 0] = totalFalses;
	
	uint totalTrues;
	uint t = totalFalses + PrefixSum(bit, groupIndex, threadCount, totalTrues);
	uint d = bit ? t : f;
	
	// Write to global memory
	KeysResult[groupId * threadCount + d] = key;
	DataResult[groupId * threadCount + d] = data;
	
	if (!groupIndex)
		CountResult[2 * groupId + 1] = totalTrues;
}

[numthreads(threadCount, 1, 1)]
void RadixScan(uint groupIndex : SV_GroupIndex)
{
	// Prefix sum the counts
	bool outOfRange = groupIndex >= TotalGroupCount[0];
	uint totalFalses;
	ScanResult[2 * groupIndex + 0] = PrefixSum(outOfRange ? 0 : GroupCounts[2 * groupIndex + 0], groupIndex, threadCount, totalFalses);
	ScanResult[2 * groupIndex + 1] = PrefixSum(outOfRange ? 0 : GroupCounts[2 * groupIndex + 1], groupIndex, threadCount) + totalFalses;
}

[numthreads(threadCount, 1, 1)]
void RadixScatter(uint id : SV_DispatchThreadID, uint groupIndex : SV_GroupIndex, uint groupId : SV_GroupID)
{
	if (id >= TotalLength)
		return;

	uint key = Keys[id];
	bool bit = (key >> BitIndex) & 0x1;
	
	uint localOffset = bit ? GroupCounts[2 * groupId + 0] : 0;
	uint globalOffset = bit ? GroupScans[2 * groupId + 1] : GroupScans[2 * groupId + 0];
	uint globalDest = groupIndex - localOffset + globalOffset;
	
	// Write final results
	DataResult[globalDest] = Data[id];
	KeysResult[globalDest] = key;
}
